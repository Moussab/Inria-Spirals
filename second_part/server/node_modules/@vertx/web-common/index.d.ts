import { AsyncResult } from '@vertx/core';

import { Buffer } from '@vertx/core';
import { WriteStream } from '@vertx/core';

export class BodyCodec {
  /**
   * 
   * @return the UTF-8 string codec
   * 
   */
  static string() : BodyCodec;

  /**
   *  A codec for strings using a specific {@code encoding}.
   * @param encoding the encoding
   * @return the codec
   * 
   */
  static string(encoding: string) : BodyCodec;

  /**
   * 
   * @return the {@link Buffer} codec
   * 
   */
  static buffer() : BodyCodec;

  /**
   * 
   * @return the {@link JsonObject} codec
   * 
   */
  static jsonObject() : BodyCodec;

  /**
   * 
   * @return the {@link JsonArray} codec
   * 
   */
  static jsonArray() : BodyCodec;

  /**
   *  Create and return a codec for Java objects encoded using Jackson mapper.
   * @return a codec for mapping POJO to Json
   * 
   */
  static json(type: Class) : BodyCodec;

  /**
   * 
   * @return a codec that simply discards the response
   * 
   */
  static none() : BodyCodec;

  /**
   *  Create a codec that buffers the entire body and then apply the {@code decode} function and returns the result.
   * @param decode the decode function
   * @return the created codec
   * 
   */
  static create(decode: (t: Buffer) => any) : BodyCodec;

  /**
   *  A body codec that pipes the body to a write stream.
   * @param stream the destination tream
   * @return the body codec for a write stream
   * 
   */
  static pipe(stream: WriteStream) : BodyCodec;

}

