import { BodyHandler } from '@vertx/web';

export class RouterFactoryOptions {

  /**
   * Supply your own BodyHandler if you would like to control body limit, uploads directory and deletion of uploaded files
   * @param bodyHandler
   * @return self
   * 
   */
  bodyHandler: BodyHandler;

  /**
   * Automatic mount handlers that return HTTP 501 status code for operations where you didn't specify an handler.
   * @param mountOperationsWithoutHandler
   * @return this object
   * 
   */
  mountNotImplementedHandler: boolean;

  /**
   * If true, when required, the factory will mount a {@link io.vertx.ext.web.handler.ResponseContentTypeHandler}
   * @param mountResponseContentTypeHandler
   * @return 
   */
  mountResponseContentTypeHandler: boolean;

  /**
   * Enable or disable validation failure handler. If you enable it during router creation a failure handler
   *  that manages ValidationException will be mounted. You can change the validation failure handler with with function {@link RouterFactoryOptions#setValidationFailureHandler(Handler)}. If failure is different from ValidationException, next failure
   *  handler will be called.
   * @param mountGlobalValidationFailureHandler
   * @return this object
   * 
   */
  mountValidationFailureHandler: boolean;

  /**
   * If true, when you call {@link RouterFactory#getRouter()} the factory will mount for every path
   *  the required security handlers and, if a security handler is not defined, it throws an {@link RouterFactoryException}
   * @param requireSecurityHandlers
   * @return this object
   * 
   */
  requireSecurityHandlers: boolean;
}

